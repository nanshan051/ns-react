(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{488:function(t,r,o){"use strict";o.r(r);var s=o(2),_=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"_1-模块化概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-模块化概述"}},[t._v("#")]),t._v(" 1. 模块化概述")]),t._v(" "),r("h3",{attrs:{id:"_1-1-什么是模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是模块化"}},[t._v("#")]),t._v(" 1.1. 什么是模块化")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("将程序文件依据一定规则 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("拆分")])],1),t._v(" 成多个文件，这种编码方式就是 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("模块化")])],1),t._v(" 的编码方式。")])]),t._v(" "),r("li",[r("p",[t._v("拆分出来 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("每个文件就是一个模块")])],1),t._v(" ，模块中的数据都是 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("私有的")])],1),t._v("，模块之间互相 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("隔离")])],1),t._v(" 。")])]),t._v(" "),r("li",[r("p",[t._v("同时也能通过一些手段，可以把模块内的指定数据“"),r("strong",[r("font",{attrs:{color:"red"}},[t._v("交出去")])],1),t._v("”，供其他模块使用。")])])]),t._v(" "),r("h3",{attrs:{id:"_1-2-为什么需要模块化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-为什么需要模块化"}},[t._v("#")]),t._v(" 1.2. 为什么需要模块化")]),t._v(" "),r("p",[t._v("随着应用的复杂度越来越高，其代码量和文件数量都会急剧增加，会逐渐引发以下问题：")]),t._v(" "),r("p",[r("strong",[t._v("① 全局污染")])]),t._v(" "),r("p",[r("strong",[t._v("② 依赖混乱")])]),t._v(" "),r("p",[r("strong",[t._v("③ 数据安全")])]),t._v(" "),r("h2",{attrs:{id:"_2-有哪些模块化规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-有哪些模块化规范"}},[t._v("#")]),t._v(" 2. 有哪些模块化规范？")]),t._v(" "),r("blockquote",[r("p",[t._v("历史背景（了解即可）：2009 年，随着 Node.js 的出现，JavaScript 在服务器端的应用逐渐增多，为了让 Node.js 的代码更好维护，就必须要定制一种 Node.js 环境下的模块化规范，来自 Mozilla 的工程师 Kevin Dangoor 提出来 CommonJS 规范（CommonJS 初期的名字叫 ServerJS），随后 Node.js 社区采纳了这一规范。")])]),t._v(" "),r("p",[t._v("随着时间的推移，针对 JavaScript 的不同运行环境，相继出现了多种模块化规范，按时间排序，分别为：")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"title"},[t._v("模块化规范种类：")]),r("ol",[r("li",[r("strong",[r("font",{attrs:{color:"red"}},[t._v("CommonIS")]),t._v(" —— 服务端应用广泛")],1)]),t._v(" "),r("li",[t._v("AMD")]),t._v(" "),r("li",[t._v("CMD")]),t._v(" "),r("li",[r("strong",[r("font",{attrs:{color:"red"}},[t._v("ES6 模块化")]),t._v(" —— 浏览器端应用广泛")],1)])])]),r("h2",{attrs:{id:"_3-导入与导出的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-导入与导出的概念"}},[t._v("#")]),t._v(" 3. 导入与导出的概念")]),t._v(" "),r("p",[t._v("模块化的核心思想就是：模块之间是 "),r("strong",[r("font",{attrs:{color:"red"}},[t._v("隔离的")])],1),t._v("，通过 "),r("strong",[t._v("导入")]),t._v(" 和 "),r("strong",[t._v("导出")]),t._v(" 进行数据和功能的共享。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("导出（暴露）")]),t._v("：模块公开其内部的一部分（如变量、函数等），使这些内容可以被其他模块使用。")]),t._v(" "),r("li",[r("strong",[t._v("导入（引入）")]),t._v("：模块引入和使用其他模块导出的内容，以重用代码和功能。")])]),t._v(" "),r("img",{staticClass:"zoomable",attrs:{src:t.$withBase("/images/screenshot/notes/2/1/1.png"),alt:"foo"}})])}),[],!1,null,null,null);r.default=_.exports}}]);